This repo contains code and data from the paper "Geohyperbolic Routing and Addressing Schemes"
I. Voitalov, R. Aldecoa, L. Wang, D. Krioukov

Published in:

ACM SIGCOMM Computer Communication Review
Volume 47 Issue 3, July 2017
Pages 11-18

DOI: 10.1145/3138808.3138811
ACM Library Page: http://dl.acm.org/citation.cfm?doid=3138808.3138811

arXiv version : https://arxiv.org/abs/1703.00520



============================================================== Data ========================================

Data presented in the repo:

I. CityDataFormatted.dat : list of all cities from GeoNames database (geonames.org) as of June 2016.

    Data is presented in the following form: City_Name(Unique_GeoNames_ID) Population Latitude Longitude RGH_Region UniqueID


II. CityDataFormattedTestbed.dat contains all cities that take part in NDN testbed as of November 2016 (33 nodes).



============================================================== Code ========================================

I. network_generator.py : Python script to generate synthetic networks according to the model presented in the paper.

    Usage:

    >python network_generator.py -n ... -m ... -g ... -c ...

    Required arguments:

    -n: number of nodes in the resulting network (int)
    -m: number of new links established per one new node (int)
    -g: network model to use; available options are: geo (corresponds to GEO model from the paper)
                                                     h3 (corresponds to GH model from the paper)
                                                     rgh (corresponds to RGH model from the paper)
    -c: path to properly formatted city data file
    
    Optional arguments:

    -t: initial network time at which network growth starts(int)
    -b: file containing formatted list of subset cities that can take part in network formation
    -r: flag to switch on/off randomized arrivals for subset cities; pay attention to the "ordered_nodes"
        variable in the script, it is hard-coded to be 205 which is related to parameters choice for the
        simulations in the paper; generally, it has to be set in a way that ALL local hubs from RGH model
        are added to the network in proper (population-based) order. In case of M = 14 major regions and 5
        local hubs in each, one has to iterate up to 205-th largest city to seed 5 hubs into each region;
    -s: number of local seeds to be placed in each region; pay attention to "ordered_nodes" variable in the
        script if adjusted; default value = 5;

    Example:

    1) To generate a network according to pure geographic model (GEO) with 300 nodes and 4 links per each
       network step, using NDN testbed nodes only, one can use:

       >python network_generator.py -n 300 -m 4 -g geo -c CityDataFormatted.dat -b CityDataFormattedTestbed.dat

       This will produce two files:
       a) "weighted_enumerated_edgelist.net" - an edgelist containing links between nodes of the form
           
           node_i_id node_j_id estimated_delay

           where estimated_delay is based on linear relation between geographic distance between nodes (i,j)
           and round trip time described in the paper.

       b) "coordinates_embedding.txt" - a file containing coordinates of nodes in the underlying geometric space

II. navigation_stats.cpp : C++ script to find greedy and optimal Dijkstra paths for a given network and embedding
                           (requires OpenMP and Boost library). Note that script requires edgelist and coordinates files to
                           have names exactly as produced by network_generator.py script.

    Usage:

    - compile with: >g++ navigation_stats.cpp -fopenmp -O3 -std=c++11
    - run with: >./a.out -t ...
    
    Required arguments:

    -t: distance type to use for greedy geometric routing; options available: geo (geographic distance)
                                                                              hyp (hyperbolic distance)

    Example:

    2) To measure routing characteristics on the network generated in previous example, use the following:

       >g++ navigation_stats.cpp -fopenmp -O3 -std=c++11
       >./a.out -t geo

       Script will produce "paths_output.dat" file that contains unweighted/weighted Dijkstra optimal paths
       as well as greedy paths with indication of routing failures for ALL node pairs. Link weights are considered to be
       estimated delays. 

       Be careful: since script saves detailed path information, the produced file may require a lot of hard drive space!

III. process_data_file.py : Python script to process data generated by navigation_stats.cpp script

    Usage:

    >python process_data_file.py paths_output.dat

    Example:

    3) Now we want to measure basic routing statistics from the data obtained by C++ script. Use script as indicated in usage
       section, and files "delay_stretches.dat" and "results_stats.dat" will be generated.

       The former contains overlay delay stretches for all measured node pairs, the latter contains all basic routing characteristics:

       a) success ratio;
       b) average and different percentiles of overlay delay stretch (ODS);
       c) average and different percentiles of underlay delay stretch (UDS).

       Refer to the paper for definitions of these stats. 


================================================================================================

For more details, refer to the paper. If you have any comments, questions or concerns regarding the code, feel free to contact 
Ivan Voitalov via email: i.voitalov ( at ) northeastern.edu